@page "/invest/test"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http.Connections.Client
@inject NavigationManager Navigation

@implements IAsyncDisposable

<PageContainer Title="Welcome">
    <Card>
        <div class="form-group">
            <label>
                User:
                <input @bind="userInput" />
            </label>
        </div>
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

        <hr>

        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>

    </Card>
 <Card>
        <div>
            @if (datas.Count > 0)
            {
                <AntList DataSource="datas" TItem="Data" Header="@header">
                    <ListItem>
                        <Comment Avatar="context.Avatar" Author="context.Author" Datetime="context.Datetime" Content="context.Content"></Comment>
                    </ListItem>
                </AntList>
            }
            <Comment Avatar="@(@"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png")">
                <ContentTemplate>
                    @GetEditor(@onSubmit)
                </ContentTemplate>
            </Comment>
        </div>


        @code {
        List<Data> datas = new List<Data>();
        RenderFragment replyAction =@<span>Reply to</span>;

        RenderFragment header =>
            @<div>
                @if (datas.Any())
            {
                <span>
                    @($"{datas.Count} {(datas.Count > 1 ? "replies" : "reply")}")
                </span>
            }
            </div>;

            async void onSubmit()
            {
                submitting = true;

                await Task.Delay(1000);
                this.datas.Add(new Data()
                {
                    Author = "Han Solo",
                    Avatar = @"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png",
                    Content = _value,
                    Datetime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                });
                submitting = false;
                _value = "";
                await InvokeAsync(StateHasChanged);
            }

            bool submitting = false;
            string _value = "";

        //TODO::Form
            RenderFragment GetEditor(Action onSubmit)
            {
                return
            @<div>
                <TextArea MinRows="4" @bind-Value="@_value" />
                <br />
                <br />
                <Button Loading="@submitting" OnClick="onSubmit " type="primary">
                    Add Comment
                </Button>
            </div>;
        }


        class Data
        {
            public string Author { get; set; }
            public string Avatar { get; set; }
            public string Content { get; set; }
            public string Datetime;
        }
        }
 </Card>
</PageContainer>


@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/statehub").ToString(), options =>
            {
                //foreach (var cookie in HttpContextAccessor.HttpContext!.Request.Cookies)
                    //options.Cookies.Add(new System.Net.Cookie(cookie.Key, cookie.Value) { Domain = HttpContextAccessor.HttpContext!.Request.Host.Host });
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
   
}
